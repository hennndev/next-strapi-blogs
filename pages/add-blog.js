import React, { useEffect, useState } from 'react'
import axios from 'axios'
import * as Yup from 'yup'
import Head from 'next/head'
import nookies from 'nookies'
import { useFormik } from 'formik'
import Alert from '@/components/UI/Alert'
import { useData } from '../context/context'
import BlogForm from '@/components/Blogs/BlogForm'

const AddBlog = () => {
    
    const { user } = useData()
    const cookies = nookies.get()
    const [isSuccess, setIsSuccess] = useState(false)
    const [isLoading, setIsLoading] = useState(false)

    const formik = useFormik({
        initialValues: {
            title: '',
            author: '',
            category: '',
            content: '',
            image: null
        },
        onSubmit: (values, { resetForm }) => {
            const formData = new FormData()
            formData.append('files', values.image)

            const confirm = window.confirm('Are you sure want to add new blog ?')

            if(confirm) {
                setIsLoading(true)
                axios({
                    url: `${process.env.NEXT_PUBLIC_URL}/api/upload`,
                    method: 'POST',
                    headers: {
                        Authorization: `Bearer ${cookies.token}`
                    },
                    data: formData
                }).then((res) => {
                    const imageURL = res.data[0].url
                    const data = {
                        title: values.title, 
                        author: values.author,
                        category: values.category,
                        content: values.content,
                        comments: [],
                        imageURL
                    }
                    axios({
                        url: `${process.env.NEXT_PUBLIC_URL}/api/blogs`,
                        method: 'POST',
                        headers: {
                            'Authorization' : `Bearer ${cookies.token}`
                        },
                        data: {
                            data
                        }
                    }).then(() => {
                        setIsLoading(false)
                        setIsSuccess(true)
                        resetForm()
                    }).catch(() => {
                        setIsLoading(false)
                    })
                })
            }
        },
        validationSchema: Yup.object({
            title: Yup.string().required('Blog title is required'),
            author: Yup.string().required('Blog author is required'),
            category: Yup.string().required('Blog category is required'),
            content: Yup.string().required('Blog content is required'),
            image: Yup.mixed().required('Blog image is required!')
                        .test('fileSize', 'Maximum size image is < 1MB', 
                        value => value?.size <= 1000000)
        })
    })

    
    useEffect(() => {
        if(user) {
            formik.setValues({
                ...formik.values,
                author: user?.username
            })
        }
    }, [user])



    return (
        <div className="flex items-center justify-center mt-10">
            <Head>
                <title>AddBlog Page | NextStrapi</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            {isSuccess && <Alert handleClose={() => setIsSuccess(false)} title='Your blog has been added'/>}
            <BlogForm formik={formik} isLoading={isLoading}/>
        </div>
    )
}



export default AddBlog
